plugins {
	id "java"
	id "edu.wpi.first.GradleRIO" version "2025.2.1"
	id "com.diffplug.spotless" version "7.0.1"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}


def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
	targets {
		roborio(getTargetTypeClass('RoboRIO')) {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = project.frc.getTeamOrDefault(2036)
			debug = project.frc.getDebugOrDefault(false)

			artifacts {
				// First part is artifact name, 2nd is artifact type
				// getTargetTypeClass is a shortcut to get the class type using a string

				frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
					jvmArgs.add("-Xmx250M");
				}

				// Static files artifact
				frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
					files = project.fileTree('src/main/deploy')
					directory = '/home/lvuser/deploy'
					deleteOldFiles = false // Change to true to delete files on roboRIO that no
										// longer exist in deploy directory of this project
				}
			}
		}
	}
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false


configurations {
	mockitoAgent
}
// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
	annotationProcessor wpi.java.deps.wpilibAnnotations()
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()
	implementation platform('org.apache.logging.log4j:log4j-bom:2.24.3');

	implementation 'org.apache.logging.log4j:log4j-api:${log4j-api.verison}'
	implementation 'org.apache.logging.log4j:log4j-core:${log4j-core.version}'
	implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:${log4j-slf4j2-impl.version}'

	roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
	roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

	roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
	roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
	testImplementation 'org.mockito:mockito-core:5.15.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	mockitoAgent(libs.mockito) {
		transitive = false
	}

	def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
	annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'

	jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	from sourceSets.main.allSource
	manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE

	manifest {
		attributes 'Multi-Release': 'true'
	}
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
	options.compilerArgs.add '-XDstringConcat=inline'
}

task(replayWatch, type: JavaExec) {
	mainClass = "org.littletonrobotics.junction.ReplayWatch"
	classpath = sourceSets.main.runtimeClasspath
}




// Spotless linter
spotless {
	format 'misc', {
		target '*.gradle', '.gitignore', '*.json'

		trimTrailingWhitespace()
		leadingSpacesToTabs()
		endWithNewline()
	}

	java {
		googleJavaFormat('1.25.2').aosp().reflowLongStrings() // Google formatting is probably good
		formatAnnotations()

		licenseHeader '/* Black Knights Robotics (C) $YEAR */'
	}
}
